Send Python-Dev mailing list submissions to
        python-dev@python.org

To subscribe or unsubscribe via the World Wide Web, visit
        https://mail.python.org/mailman/listinfo/python-dev
or, via email, send a message with subject or body 'help' to
        python-dev-request@python.org

You can reach the person managing the list at
        python-dev-owner@python.org

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Python-Dev digest..."


Today's Topics:

   1. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Michael Selik)
   2. Re: Change in Python 3's "round" behavior (Stephen J. Turnbull)
   3. Re: What is the purpose of the _PyThreadState_Current symbol
      in Python 3? (Nathaniel Smith)
   4. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Antoine Pitrou)
   5. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Sean Harrington)
   6. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Antoine Pitrou)
   7. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Sean Harrington)
   8. Re: bpo-34837: Multiprocessing.Pool API Extension - Pass Data
      to Workers w/o Globals (Sean Harrington)


----------------------------------------------------------------------

Message: 1
Date: Fri, 28 Sep 2018 18:27:13 -0700
From: Michael Selik <mike@selik.org>
To: seanharr11@gmail.com
Cc: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID:
        <CAGgTfkNt0JZD3UPpQRA7U9m75Y_OCZMJb+S+3mVxF=DGZGYwKg@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"

On Fri, Sep 28, 2018 at 2:11 PM Sean Harrington <seanharr11@gmail.com> wrote:
> kwarg on Pool.__init__ called `expect_initret`, that defaults to False. When set to True:
> Capture the return value of the initializer kwarg of Pool
> Pass this value to the function being applied, as a kwarg.

The parameter name you chose, "initret" is awkward, because nowhere
else in Python does an initializer return a value. Initializers mutate
an encapsulated scope. For a class __init__, that scope is an
instance's attributes. For a subprocess managed by Pool, that
encapsulated scope is its "globals". I'm using quotes to emphasize
that these "globals" aren't shared.


On Fri, Sep 28, 2018 at 4:39 PM Sean Harrington <seanharr11@gmail.com> wrote:
> On Fri, Sep 28, 2018 at 6:45 PM Antoine Pitrou <solipsis@pitrou.net> wrote:
>> 3. If you don't like globals, you could probably do something like
>> lazily-initialize the resource when a function needing it is executed
>
> if initializing the resource is expensive, we only want to do this ONE time per worker process.

We must have a different concept of "lazily-initialize". I understood
Antoine's suggestion to be a one-time initialize per worker process.


On Fri, Sep 28, 2018 at 4:39 PM Sean Harrington <seanharr11@gmail.com> wrote:
> My simple argument is that the developer should not be constrained to make the objects passed globally available in the process, as this MAY break encapsulation for large projects.

I could imagine someone switching from Pool to ThreadPool and getting
into trouble, but in my mind using threads is caveat emptor. Are you
worried about breaking encapsulation in a different scenario?


------------------------------

Message: 2
Date: Sat, 29 Sep 2018 16:43:14 +0900
From: "Stephen J. Turnbull" <turnbull.stephen.fw@u.tsukuba.ac.jp>
To: Greg Ewing <greg.ewing@canterbury.ac.nz>
Cc: python-dev@python.org
Subject: Re: [Python-Dev] Change in Python 3's "round" behavior
Message-ID: <23471.11538.998069.413468@turnbull.sk.tsukuba.ac.jp>
Content-Type: text/plain; charset=us-ascii

Greg Ewing writes:

 > (BTW, how do you provide a citation for "common knowledge"?-)

Aumann, Robert J. [1976], "Agreeing to Disagree."  Annals of
Statistics 4, pp. 1236-1239

is what I usually use. :-)



------------------------------

Message: 3
Date: Sat, 29 Sep 2018 03:00:27 -0700
From: Nathaniel Smith <njs@pobox.com>
To: Gabriele <phoenix1987@gmail.com>
Cc: Python Dev <python-dev@python.org>
Subject: Re: [Python-Dev] What is the purpose of the
        _PyThreadState_Current symbol in Python 3?
Message-ID:
        <CAPJVwBktnu3ja_N6zCGYRqX_YNxf_1sjxxfqSWQAc+yhpsH_Ew@mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"

On Fri, Sep 28, 2018 at 3:29 PM, Gabriele <phoenix1987@gmail.com> wrote:
> On Fri, 28 Sep 2018 at 23:12, Nathaniel Smith <njs@pobox.com> wrote:
>> What information do you wish the interpreter provided, that would make your program simpler and more reliable?
>
> An exported global variable that points to the head of the
> PyInterpreterState linked list (i.e. the return value of
> PyInterpreterState_Head). This way my program could just look this up
> from the dynsym section instead of scanning a dump of the bss section
> in memory to find a possible candidate.

Hmm, it looks like in 3.7+, _PyRuntime is marked PyAPI_DATA, which I
think should make it exported from dynsym?

https://github.com/python/cpython/blob/4b430e5f6954ef4b248e95bfb4087635dcdefc6d/Include/internal/pystate.h#L206

And PyInterpreterState_Head is just _PyRuntime.interpreters.head. So
maybe this is already done...

-n

--
Nathaniel J. Smith -- https://vorpus.org


------------------------------

Message: 4
Date: Sat, 29 Sep 2018 12:04:47 +0200
From: Antoine Pitrou <solipsis@pitrou.net>
To: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID: <20180929120447.6f7cd478@fsol>
Content-Type: text/plain; charset=US-ASCII


Hi Sean,

On Fri, 28 Sep 2018 19:23:06 -0400
Sean Harrington <seanharr11@gmail.com> wrote:
> My simple argument is that the
> developer should not be constrained to make the objects passed globally
> available in the process, as this MAY break encapsulation for large
> projects.

IMHO, global variables don't break encapsulation if they remain private
to the module where they actually play a role.

Of course, there are also global-like alternatives to globals, such as
class attributes...  The multiprocessing module itself uses globals (or
quasi-globals) internally for various implementation details.

> 3. If you don't like globals, you could probably do something like
> > lazily-initialize the resource when a function needing it is executed;
> > this also avoids creating the resource if the child doesn't use it at
> > all.  Would that work for you?
> >
> > I have nothing against globals, my gripe is with being enforced to use
> them for every Pool use case. Further, if initializing the resource is
> expensive, we only want to do this ONE time per worker process.

That's what I meant with lazy initialization: initialize it if not
already done, otherwise just use the already-initialized resource.
It's a common pattern.

(you can view it as a 1-element cache if you prefer)

> > As a more general remark, I understand the desire to make the Pool
> > object more flexible, but we can also not pile up features until it
> > satisfies all use cases.
> >
> > I understand that this is a legitimate concern, but this is about API
> approachability.  Python end-users of Pool are forced to declare a global
> from a lexical scope. Most Python end-users probably don't even know this
> is possible.

Hmm...  We might have a disagreement on the target audience of the
multiprocessing module.  multiprocessing isn't very high-level, I would
expect it to be used by experienced programmers who know how to mutate
a global variable from a lexical scope.

For non-programmer end-users, such as data scientists, there are
higher-level libraries such as Celery (http://www.celeryproject.org/)
and Dask distributed (https://distributed.readthedocs.io/en/latest/).
Perhaps it would be worth mentioning them in the documentation.

Regards

Antoine.


------------------------------

Message: 5
Date: Sat, 29 Sep 2018 08:13:19 -0400
From: Sean Harrington <seanharr11@gmail.com>
To: solipsis@pitrou.net
Cc: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID:
        <CAFbyWc0UXKTvhYQofPUu-vMq3dzqSsFn-tCfy2LHoPBo3HU8bQ@mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

On Sat, Sep 29, 2018 at 6:24 AM Antoine Pitrou <solipsis@pitrou.net> wrote:

>
> Hi Sean,
>
> On Fri, 28 Sep 2018 19:23:06 -0400
> Sean Harrington <seanharr11@gmail.com> wrote:
> > My simple argument is that the
> > developer should not be constrained to make the objects passed globally
> > available in the process, as this MAY break encapsulation for large
> > projects.
>
> IMHO, global variables don't break encapsulation if they remain private
> to the module where they actually play a role.
>
> Of course, there are also global-like alternatives to globals, such as
> class attributes...  The multiprocessing module itself uses globals (or
> quasi-globals) internally for various implementation details.
>

>>>  Yes, class attributes are a viable alternative. I've written about
this here.
<https://thelaziestprogrammer.com/python/multiprocessing-pool-a-global-solution>
Still,
the argument is not against global variables, class attributes or any close
cousins -- it is simply that developers shouldn't be forced to use these.


> > 3. If you don't like globals, you could probably do something like
> > > lazily-initialize the resource when a function needing it is executed;
> > > this also avoids creating the resource if the child doesn't use it at
> > > all.  Would that work for you?
> > >
> > > I have nothing against globals, my gripe is with being enforced to
> use
> > them for every Pool use case. Further, if initializing the resource is
> > expensive, we only want to do this ONE time per worker process.
>
> That's what I meant with lazy initialization: initialize it if not
> already done, otherwise just use the already-initialized resource.
> It's a common pattern.
>
> (you can view it as a 1-element cache if you prefer)
>

>>> Sorry - I wasn't following your initial suggestion. This is a valid
solution for ONE of the general use cases (where we initialize objects in
each worker post-fork). However it fails for the other Pool use case of
"initializing a big object in your parent, and passing to each worker,
without using globals."

> > As a more general remark, I understand the desire to make the Pool
> > > object more flexible, but we can also not pile up features until it
> > > satisfies all use cases.
> > >
> > > I understand that this is a legitimate concern, but this is about API
> > approachability.  Python end-users of Pool are forced to declare a global
> > from a lexical scope. Most Python end-users probably don't even know this
> > is possible.
>
> Hmm...  We might have a disagreement on the target audience of the
> multiprocessing module.  multiprocessing isn't very high-level, I would
> expect it to be used by experienced programmers who know how to mutate
> a global variable from a lexical scope.
>

>>> It is one thing to MUTATE  a global from a lexical scope. No gripes
there. The specific concept I'm referencing here, is "DECLARING a global
variable, from within a lexical scope". This is not as a intuitive for most
programmers.


> For non-programmer end-users, such as data scientists, there are
> higher-level libraries such as Celery (http://www.celeryproject.org/)
> and Dask distributed (https://distributed.readthedocs.io/en/latest/).
> Perhaps it would be worth mentioning them in the documentation.
>


>>> We likely do NOT have disagreements on the multiprocessing module.
Multiprocessing is NOT high-level, I agree. But the beauty of the "Pool"
API is that it gives non-programmer end-users (like data scientists) the
ability to leverage multiple cores, without (in most cases) needing to know
implementation details about multiprocessing. All they need to understand
is the higher-order-function "map()", which is a very simple concept. (I
even sound over-complicated myself calling it a "higher-order-function"...)


> Regards
>
> Antoine.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev@python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/seanharr11%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20180929/3c112d38/attachment-0001.html>

------------------------------

Message: 6
Date: Sat, 29 Sep 2018 14:17:59 +0200
From: Antoine Pitrou <solipsis@pitrou.net>
To: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID: <20180929141759.3d613436@fsol>
Content-Type: text/plain; charset=US-ASCII

On Sat, 29 Sep 2018 08:13:19 -0400
Sean Harrington <seanharr11@gmail.com> wrote:
> >
> > Hmm...  We might have a disagreement on the target audience of the
> > multiprocessing module.  multiprocessing isn't very high-level, I would
> > expect it to be used by experienced programmers who know how to mutate
> > a global variable from a lexical scope.
> >
>
> >>> It is one thing to MUTATE  a global from a lexical scope. No gripes
> there. The specific concept I'm referencing here, is "DECLARING a global
> variable, from within a lexical scope". This is not as a intuitive for most
> programmers.

Well, you don't have to.  You can bind it to None in the top-level
scope and then mutate it from the lexical scope:

my_resource = None

def do_work():
    global my_resource
    my_resource = ...

Regards

Antoine.


------------------------------

Message: 7
Date: Sat, 29 Sep 2018 08:23:49 -0400
From: Sean Harrington <seanharr11@gmail.com>
To: mike@selik.org
Cc: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID:
        <CAFbyWc2w09SSCktQZzG_MYawdH+zYd4GufPrmShS58tN97WTNQ@mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

On Fri, Sep 28, 2018 at 9:27 PM Michael Selik <mike@selik.org> wrote:

> On Fri, Sep 28, 2018 at 2:11 PM Sean Harrington <seanharr11@gmail.com>
> wrote:
> > kwarg on Pool.__init__ called `expect_initret`, that defaults to False.
> When set to True:
> > Capture the return value of the initializer kwarg of Pool
> > Pass this value to the function being applied, as a kwarg.
>
> The parameter name you chose, "initret" is awkward, because nowhere
> else in Python does an initializer return a value. Initializers mutate
> an encapsulated scope. For a class __init__, that scope is an
> instance's attributes. For a subprocess managed by Pool, that
> encapsulated scope is its "globals". I'm using quotes to emphasize
> that these "globals" aren't shared.
>

>> Yes - if you bucket the "initializer" arg of Pool into the "Python
initializers" then I see your point here. And yes initializer mutates the
global scope of the worker subprocess. Again, my gripe is not with globals.
I am looking for the ability to have a clear, explicit flow of data from
parent -> child process, without being constrained to using globals.


>
> On Fri, Sep 28, 2018 at 4:39 PM Sean Harrington <seanharr11@gmail.com>
> wrote:
> > On Fri, Sep 28, 2018 at 6:45 PM Antoine Pitrou <solipsis@pitrou.net>
> wrote:
> >> 3. If you don't like globals, you could probably do something like
> >> lazily-initialize the resource when a function needing it is executed
> >
> > if initializing the resource is expensive, we only want to do this ONE
> time per worker process.
>
> We must have a different concept of "lazily-initialize". I understood
> Antoine's suggestion to be a one-time initialize per worker process.
>

>> See my response to Anotoine earlier. I missed the point made. This is a
valid solution to the problem of "initializing objects after a worker has
been forked", but fails to address the "create big object in parent, pass
to each worker".


>
> On Fri, Sep 28, 2018 at 4:39 PM Sean Harrington <seanharr11@gmail.com>
> wrote:
> > My simple argument is that the developer should not be constrained to
> make the objects passed globally available in the process, as this MAY
> break encapsulation for large projects.
>
> I could imagine someone switching from Pool to ThreadPool and getting
> into trouble, but in my mind using threads is caveat emptor. Are you
> worried about breaking encapsulation in a different scenario?
>

>> Without a specific example on-hand, you could imagine a tree of function
calls that occur in the worker process (even newly created objects), that
should not necessarily have access to objects passed from parent -> worker.
In every case given the current implementation, they will.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20180929/79ab1214/attachment-0001.html>

------------------------------

Message: 8
Date: Sat, 29 Sep 2018 08:26:06 -0400
From: Sean Harrington <seanharr11@gmail.com>
To: solipsis@pitrou.net
Cc: python-dev@python.org
Subject: Re: [Python-Dev] bpo-34837: Multiprocessing.Pool API
        Extension - Pass Data to Workers w/o Globals
Message-ID:
        <CAFbyWc0Gj+0E2XyTOOPBNbB-fWBLC=k6xzT1UPr6Kn5H4gYtXA@mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

On Sat, Sep 29, 2018 at 8:18 AM Antoine Pitrou <solipsis@pitrou.net> wrote:

> On Sat, 29 Sep 2018 08:13:19 -0400
> Sean Harrington <seanharr11@gmail.com> wrote:
> > >
> > > Hmm...  We might have a disagreement on the target audience of the
> > > multiprocessing module.  multiprocessing isn't very high-level, I would
> > > expect it to be used by experienced programmers who know how to mutate
> > > a global variable from a lexical scope.
> > >
> >
> > >>> It is one thing to MUTATE  a global from a lexical scope. No gripes
> > there. The specific concept I'm referencing here, is "DECLARING a global
> > variable, from within a lexical scope". This is not as a intuitive for
> most
> > programmers.
>
> Well, you don't have to.  You can bind it to None in the top-level
> scope and then mutate it from the lexical scope:
>
> my_resource = None
>
> def do_work():
>     global my_resource
>     my_resource = ...
>
> >>> Yes but this is even more constraining, as it forces the parent
process to declare a global variable that it likely never uses!



> Regards
>
> Antoine.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev@python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/seanharr11%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20180929/106083bb/attachment.html>

------------------------------

Subject: Digest Footer

_______________________________________________
Python-Dev mailing list
Python-Dev@python.org
https://mail.python.org/mailman/listinfo/python-dev


------------------------------

End of Python-Dev Digest, Vol 182, Issue 51
*******************************************
